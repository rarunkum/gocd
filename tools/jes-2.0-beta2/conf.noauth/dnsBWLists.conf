################################################################
#                                                              #
#      White/Black Listing SMTP clients using dnswl/dnsbl      #
#                                                              #
################################################################

######################### General Notes ########################
## Purpose
#
# Regardless of using amavisd-new or not, JES now
# offers the option to determine the incoming IP's legitimacy
# by submitting it to a series of lists for verification.
#
## Process outline
#
# The process is the following:
# First submit the IP to a whitelist (mandatory)
# If it is listed bypass amavisd-new (if active)
# If not go to the next step
# Submit the IP to a mixedlist (optional)
# If it is whitelisted bypass amavisd-new
# If it is not or it is blacklisted go to the next step
# Submit the IP to a blacklist (mandatory)
# If it is listed then based on the severity do the following:
# If the severity level is BBB then block the incoming connection
# (Or alternatively relay it to amavisd-new. Because use of such
# lists is considered contreversial by many, the administrator
# is given the option of either blocking or relaying to amavis).
# If the severity level is BB or B then relay the message to
# amavisd-new.
# If the IP is not listed the administrator can select to either
# have the message relayed to amavisd-new or not.
################################################################

######################## Usage Scenario ########################

whitelist=list.dnswl

mixedlist=hostkarma.junkemailfilter

blacklist=zen.spamhaus

# The following options are used in the last step exclusively

# The next option determines whether a strict set of replies will
# be used in addition to the general reply set when querying the
# blacklist.
# Default: false
blacklist.use.strict=

# Default: false
max.severity.block=

# Default: true
not.listed.amavis=
################################################################

####################### Additional Notes #######################
## General and Strict Replies
#
# General replies are those that represent proxy servers, relay
# servers, established spammers, zombie networks. They can be
# considered as definite threats.
# Strict replies are those that refer to dynamic IPs, IPs that
# are not expected to send mail, web servers with FormMail
# scripts. These constitute an undeterminable threat level.
#
# A very liberal usage scenario would: use a mixlist, ignore
# strict replies, not block in case of a BBB level reply and
# bypass amavisd-new in case no reply is received when submitting
# the IP to a blacklist.
#
# A very conservative usage scenario would: not use a mixlist,
# take into account strict replies, block in case of a BBB level
# reply and relay the message to amavisd-new even if the IP is
# not listed in a blacklist.
#
# And there is the space in between these two scenarios.
#
## To use an aggregate list or not
#
# It is far more efficient to query an aggregate list and
# interpret the results that will come from a wider range than
# query multiple non-aggregate lists and interpret the resuls
# from a narrow range of possible results. The first choice
# limits the use of a list's resources and minimizes the risk of
# having the incoming connection time out until a reply is
# received. Based on this line of thinking the zen.spamhaus.org
# and dnsbl.sorbs.net where chosen. Of course any list can be
# added to be used but the whole process is designed so as to
# submit at most 3 requests per incoming SMTP client connection.
#
## List Format
#
# The information regarding a particular list is depicted
# in a customized format that appears to be self-explanatory.
# Here's a little run through anyway:
# First a list is named in a list.name.x property where x is
# incremented for every new list. Then its hostname is typed in.
# Following that is (are) the sublist(s) declaration(s).
# Each sublist is declared as <list.name.x>.sublist.y where y
# is incremented for each new sublist.
# For each sublist ONE <list.name.x>.<sublist.y>.general property
# must be present and optionaly ONE strict property.
# The general and strict properties share the same structure for
# their value; a list of 127.x.x.y:z seperated by commas.
# x can take all the normal values (0-255) plus the asterisk
# character to signify ANY value; y only takes normal values
# and finally z takes the values:BBB,BB,B,W,WW,WWW.
# BBB is the most severe and WWW is hopefully the most benign.
#
## Logging
#
# The process responsible for parsing the contents of this
# file is extensively and meticulously being logged so as to
# provide the best possible info should a parsing error arise.
#
## Final Notes
#
# The lists supplied can be replaced all together. Have the
# severity level changed for any sublist reply entry. A reply
# can be moved from a general property to a strict property.
# This way an administrator can customize the IP verification
# system any way one sees fit. But the fundamental process is
# still based on the 2 (or 3) request system. So there has to
# be at least one list to be used as a whitelist and at least
# one list to be used as a blacklist. A third one can be
# optionally used as a mixedlist. No list (that is a sublist)
# can be used more than once.
################################################################

############################ Lists #############################
list.name.1=junkemailfilter
junkemailfilter.hostname=junkemailfilter.com
junkemailfilter.sublist.1=noble
junkemailfilter.noble.general=127.0.0.1:WWW,127.0.0.3:W,127.0.0.5:WW
junkemailfilter.sublist.2=hostkarma
junkemailfilter.hostkarma.general=127.0.0.1:WWW,127.0.0.2:BBB,127.0.0.3:W,127.0.0.4:BB
list.name.2=dnswl
dnswl.hostname=dnswl.org
dnswl.sublist.1=list
dnswl.list.general=127.0.*.0:W,127.0.*.1:W,127.0.*.2:WW,127.0.*.3:WWW
list.name.3=spamhaus
spamhaus.hostname=spamhaus.org
spamhaus.sublist.1=zen
spamhaus.zen.general=127.0.0.2:BBB,127.0.0.4:BBB,127.0.0.5:BBB,127.0.0.6:BBB
spamhaus.zen.strict=127.0.0.10:B,127.0.0.11:B
list.name.4=sorbs
sorbs.hostname=sorbs.net
sorbs.sublist.1=dnsbl
sorbs.dnsbl.general=127.0.0.2:BBB,127.0.0.3:BBB,127.0.0.4:BBB,127.0.0.5:BBB,127.0.0.6:BB,127.0.0.9:BB
sorbs.dnsbl.strict=127.0.0.7:B,127.0.0.8:B,127.0.0.10:B